package mazeGenerator;

import java.util.ArrayList;
import java.util.Random;

/**
 * @file  Maze3d.java
 * 
 * @author 	Shira Ziv
 * 
 * @description	This class represents  a 3d maze.
 * 
 * @date    02/09/2016
 */


public class Maze3d  {

	private int [] [] [] maze3d;
	private int high;
	private int row;
	private int column;
	private Position enter;
	private Position exit;
	
	/**
	 * Constractor.
	 * The constractor initialize the maze with 0 value and the enter and exit positions with null.
	 * 
	 * @param column - the x coordinate of columns' maze.
	 * @param row - the y coordinate of rows' maze.
	 * @param high - the z coordinate of highs' maze.
	 */
	public Maze3d (int high, int row, int column)
	{
		this.maze3d=new int [high] [row] [column];
		this.high = high;
		this.row = row;
		this.column = column;
		for(int i = 0 ;i < high ; i++ ){					
			for(int j = 0 ; j < row ; j++){			//setting the whole maze to 0
				for(int k = 0 ; k < column ; k++){
					this.maze3d[i][j][k] = 0;
				}
			}
		this.enter=null;
		this.exit=null;
		
		}	
	}

	@Override
	public String toString() {
		String output ="";

		for(int i = 0 ;i <this.high ; i++ ){
			for(int j = 0 ; j < this.row ; j++){
				for(int k = 0 ; k < this.column ; k++){
						output+=this.maze3d[i][j][k]+" ";
				}
				output+="\n";
			}
			output+="\n";
		}
		return output;
	}
	
	/**
	 * Fill the whole maze with walls(1 value).
	 */
	public void fillWall(){	
		
		for(int i = 0 ;i < this.high ; i++ ){
			for(int j = 0 ; j < this.row ; j++){
				for(int k = 0 ; k < this.column ; k++){				//creating a grid of 1 and 0 (an outer shell of the maze)
					this.maze3d[i][j][k] = 1;
				}
			}
		}
	}
	/**
	 * Initialize the maze with random exit and enter positions.
	 */
	public void randomEnterAndExit(){
		Random rand = new Random();
		int randEnterH = 0; 
		int randEnterR = 0; 
		int randEnterM = 0;
		int randExitH = 0;
		int randExitR = 0; 
		int randExitM = 0 ;
		//choosing right enter and exit position randomly
		if (this.getHigh() != 1){
			randEnterH = rand.nextInt(this.getHigh()) + 0;
			while (randExitH > this.getHigh() )
				randExitH = rand.nextInt(this.getHigh()-1) + randEnterH;
		}
		if (this.getRow() != 1){
			randEnterR = rand.nextInt(this.getRow()) + 0;
			while (randExitR > this.getRow() )
				randExitR = rand.nextInt(this.getRow()-1) + randEnterR;
		}
		if (this.getColumn() != 1){
			randEnterM = rand.nextInt(this.getColumn()) + 0;
			while (randExitM > this.getColumn() )
				randExitM = rand.nextInt(this.getColumn()-1) + randEnterM;
		}
		this.setEnter (new Position(randEnterH,randEnterR,randEnterM));
		this.setExit(new Position(randExitH,randExitR,randExitM));
		
	}
	/**
	 * The method is used to get a certain Position's possible movement options
	 * 
	 * @param p - Position.
	 * @return String[] that represents all possible moves given a certain position.
	 */
	public String[] getPossibleMoves(Position p){
		String [] s = new String[6];
		int x = p.getX();
		int y= p.getY();
		int z= p.getZ();
		if (x == this.column-1 ){
			s[0]="wall";
		}
		else if(this.maze3d[z][y][x+1] == 1){
			 s[0]="wall";
		}
		else {
			s[0]="clear";
		}
		if (y == this.row-1 ){
			s[2]="wall";
		}
		else if(this.maze3d[z][y+1][x] == 1){
			 s[2]="wall";
		}
		else{
			s[2]="clear";
		}
		if (z==this.high-1 )
			s[4]="wall";
		else if(this.maze3d[z+1][y][x] == 1)
			s[4]="wall";
		else s[4]="clear";
		if (x==0)
			s[1]="wall";
		else if(this.maze3d[z][y][x-1] == 1)
			s[1]="wall";
		else s[1]="clear";
		if (y==0)
			s[3]="wall";
		else if(this.maze3d[z][y-1][x] == 1)
			s[3]="wall";
		else s[3]="clear";
		if (z==0)
			s[5]="wall";
		else if(this.maze3d[z-1][y][x] == 1)
			s[5]="wall";
		else s[5]="clear";
		
		return s;
			
		}
	/**
	 * Getting a value and change cell value.
	 * 
	 * @param x - the x coordinate of columns' maze. 
	 * @param y - the y coordinate of rows' maze.
	 * @param z - the z coordinate of highs' maze.
	 * @param value - a value that we need to enter to the cell.
	 */
	public void setCell(int z , int y, int x , int value){
		this.maze3d[z][y][x] = value;
	}
	/**
	 * Getting a position and change its value with the number we are getting as a parameter.
	 * 
	 * @param p- a position that represent a cell.
	 * @param number - a value that we need to enter to the cell.
	 */
	public void setCell(Position p,int number) {				//set a position's value
		this.maze3d[p.getZ()][p.getY()][p.getX()] = number;
		
	}
	/**
	 * Getting a position and erases it(put 0 value). 
	 * 
	 * @param p - Position to erase.
	 */
	public void erasePos(Position p){					//put 0 in a given position
		this.maze3d[p.getZ()][p.getY()][p.getX()] = 0;
	}
	/**
	 * The method find the closest cell to the edge. 
	 * 
	 * @param y - the y coordinate of rows' maze.
	 * @param z - the z coordinate of highs' maze.
	 * @param x - the x coordinate of columns' maze.
	 * @return Position - the closet cell.
	 */
	public Position getNextMove(int z,int y, int x) {			
		if (this.getColumn()!= 1){
			if(x == 0 )
				x++;
			if(x == this.column- 1)
				x--;
		}
		if (this.getRow() != 1){
			if(y == 0)
				y++;
			if(y == this.row - 1)
				y--;
		}
		if (this.getHigh() != 1){
			if(z == 0)
				z++;
			if(z == this.high - 1)
				z--;
		}
		
		Position newPos = new Position(z,y,x);
		return newPos;
	}
	/**
	 * The method find position of cell randomally. 
	 * 
	 * @return Position - the random cell.
	 */
	public Position getRandomCell(){
		Random rand = new Random();
		int z,y,x;
		if(this.high==1)
			z = 0;
		else z = 0 + rand.nextInt(this.high-1);;
		if(this.row==1)
			y = 0;
		else y = 0 + rand.nextInt(this.row-1);
		if(this.column==1)
			x = 0;
		else x = 0 + rand.nextInt(this.column-1);

		Position p = new Position(z,y,x);
		return p;
	}
	/**
	 * The method find positions clear neighbors. 
	 * 
	 * @param visited - a boolean[][][] which specify which cell has been visited.
	 * @param p - Position - the position which we want to find it's unvisited neighbors.
	 * @return ArrayList that contains positions which are unvisited.
	 */
	public ArrayList<Position> getUnvisitedNeighbors(boolean[][][] visited,Position p){	//returns a ArrayList of positions of the given position's adjacent unvisited neighbors
		
		ArrayList<Position> arr = new ArrayList<Position>();
		
		int x = p.getX();
		int y = p.getY();
		int z = p.getZ();
		 
		if( x < this.getColumn() - 1)
		{
			if(visited[z][y][x+1] == false)
			{
				arr.add(new Position( z , y , x+1 ));
			}
		}
		if(x - 1 >= 0)
		{
			if(visited[z][y][x-1] == false)
			{
				arr.add(new Position( z , y , x-1 ));
			}
		}
		if( y < this.getRow() - 1)
		{
			if(visited[z][y+1][x] == false)
			{
				arr.add(new Position( z , y + 1 , x ));
			}
		}
		if(y - 1 >= 0)
		{
			if(visited[z][y-1][x] == false)
			{
				arr.add(new Position( z , y - 1 , x ));
			}
		}
		if( z < this.getHigh() - 1)
		{	
			if(visited[z+1][y][x] == false)
			{
				arr.add(new Position( z+1 , y , x ));
			}
		}
		if( z - 1 >= 0)
		{
			if(visited[z-1][y][x] == false)
			{
				arr.add(new Position( z-1 , y , x ));
			}
		}
		
		
		return arr;
		
	}

	/**
	 * The method is used to find a random unvisited cell in the maze.
	 * 
	 * @param visited - a boolean[][][] that specify which cell hasn't been visited yet.
	 * @return  Position- a position of a  new random unvisited cell.
	 */
	public Position getNewUnvisitedCell(boolean[][][] visited){	
		int x = 0, y = 0 , z = 0;
		Random rand = new Random();
		
		while(visited[z][y][x] == true)
		{
			x = rand.nextInt(this.column-1)+1;
			y = rand.nextInt(this.row-1)+1;
			z = rand.nextInt(this.high-1)+1;
			
		}
		
		return new Position(z, y, x);
	}
	
	/**
	 * The method returns the start position
	 */
	public Position getStartPosition(){
		return this.enter;
	}
	/**
	 * The method returns the end position
	 */
	public Position getGoalPosition(){
		return this.exit;
	}
	
	/**
	 * Getting a value- the 2d maze crossed by Z dimension from the 3d maze.
	 * 
	 * @param num - The Z dimensions cross section by
	 * @return int [][]- a slice of 2d array.
	 * @return	2d maze crossed section by z
	 */
	public int [][] getCrossSectionByZ(int num) throws IndexOutOfBoundsException{
		int row=this.row;
		int column=this.column;
		if(num >=0 && num <= this.high)
		{
			int [][] maze2d= new int[row][column];
			for (int i=0; i<row; i++){
				for(int j=0; j<column; j++){
					maze2d[i][j] = this.maze3d[num][i][j];
				}
			}
		return maze2d;
		}
		else
		{
			throw new IndexOutOfBoundsException();
		}		
	}
	/**
	 * Getting a value- the 2d maze crossed by Y dimension from the 3d maze.
	 * 
	 * @param num - The Y dimensions cross section by
	 * @return int [][]- a slice of 2d array.
	 * @return	2d maze crossed section by y
	 */
	public int [][] getCrossSectionByY(int num) throws IndexOutOfBoundsException{
		int column=this.column;
		int high=this.high;
		if(num >=0 && num <= this.row)
		{
			int [][] maze2d= new int[column][high];
			for (int i=0; i<column; i++){
				for(int j=0; j<high; j++){
					maze2d[i][j]=this.maze3d[j][num][i];
				}
			}
		return maze2d;
		}
		else
		{
			throw new IndexOutOfBoundsException();
		}
				
	}
	/**
	 * Getting a value- the 2d maze crossed by X dimension from the 3d maze.
	 * 
	 * @param num - The X dimensions cross section by
	 * @return int [][]- a slice of 2d array.
	 * @return	2d maze crossed section by x
	 */
	public int[][] getCrossSectionByX(int num) throws IndexOutOfBoundsException{
		int row=this.row;
		int high=this.high;
		if(num >= 0 && num <= this.column)
		{
			int [][] maze2d= new int[row][high];
			for (int i=0; i<row; i++){
				for(int j=0; j<high; j++){
					maze2d[i][j]=this.maze3d[j][i][num];
				}
			}
		return maze2d;
		}
		else
		{
			throw new IndexOutOfBoundsException();
		}
				
	}
	/**
	 * Getting a position and finds its value. 
	 * 
	 * @param x - the x coordinate of columns' maze. 
	 * @param y - the y coordinate of rows' maze.
	 * @param z - the z coordinate of highs' maze.
	 * @return the value.
	 */
	public int getCellValue(int z,int y,int x){
		return this.maze3d[z][y][x];
	}
	/** 
	 * Checking if a cell is free to move (zero).
	 * 
	 * @param p - the position to check.
	 * @return True if the cell is right, otherwise return False.
	*/
	public boolean cellFree(Position p)
	{
		if (this.rightPosition(p) &&  this.getMaze3d()[p.getZ()][p.getY()][p.getX()] == 0)
		{
				return true;
		}
		return false;
	}
	/** 
	 * Checking if a position is ok.
	 * 
	 * @param p - the position to check.
	 * @return True if the position is right, otherwise return False.
	*/
	public boolean rightPosition(Position p)
	{
		if (((p.getX()>this.column-1) || (p.getX() < 0))
			|| (p.getY() > this.getRow()-1 || p.getY()< 0) || (p.getZ() > this.getHigh()-1 || p.getZ() < 0)) 
			return false;
		return true;
	} 
	/** 
	 * Counts maze size.
	 * 
	 * @return the size in bytes.
	*/
	public byte[] toByteArray()
	{
		byte[] res = new byte[9+(this.getHigh()*this.getRow()*this.getColumn())];
		
		res[0] = (byte)this.getStartPosition().getZ();
		res[1] = (byte)this.getStartPosition().getY();
		res[2] = (byte)this.getStartPosition().getX();
		res[3] = (byte)this.getGoalPosition().getZ();
		res[4] = (byte)this.getGoalPosition().getY();
		res[5] = (byte)this.getGoalPosition().getX();
		res[6] = (byte)this.getHigh();
		res[7] = (byte)this.getRow();
		res[8] = (byte)this.getColumn();
		int count = 9;
		for (int i = 0; i < this.getHigh(); ++i)
		{
			for (int j = 0; j < this.getRow(); ++j)
			{
				for (int k=  0; k < this.getColumn(); ++k)
				{
					res[count] = (byte)this.getMaze3d()[i][j][k];
					count++;
				}
			}
		}
		return res;
	}
	/** 
	 * constractor of 3d maze.
	 * 
	 * @param mazeBytes- the  size of the maze with bytes.
	*/
	public Maze3d(byte[] mazeBytes)
	{
		this.setEnter(new Position(mazeBytes[0],mazeBytes[1],mazeBytes[2]));
		this.setExit(new Position(mazeBytes[3],mazeBytes[4],mazeBytes[5]));
		
		this.setHigh(mazeBytes[6]);
		this.setRow(mazeBytes[7]);
		this.setColumn(mazeBytes[8]);
		this.setMaze3d(new int[this.getHigh()][this.getRow()][this.getColumn()]);
		int count = 9;
		for (int i = 0; i < this.getHigh(); ++i)
		{
			for (int j = 0; j < this.getRow(); ++j)
			{
				for (int k=  0; k < this.getColumn(); ++k)
				{
					this.maze3d[i][j][k] = mazeBytes[count];
					count++;
				}
			}
		}
	}


	//getters and setters
	/**
	 * Gets the mazes 3d .
	 * 
	 * @return 3d maze.
	 */
	public int[][][] getMaze3d() {
		return maze3d;
	}
	/**
	 * Sets the mazes .
	 * 
	 * @Param- the maze we need to use for change.
	 */
	public void setMaze3d(int[][][] maze3d) {
		this.maze3d = maze3d;
	}
	/**
	 * Gets the mazes high number .
	 * 
	 * @return The value of the high.
	 */
	public int getHigh() {
		return high;
	}
	/**
	 * Sets the mazes high .
	 * 
	 * @Param- the high we need to use for change.
	 */
	public void setHigh(int high) {
		this.high = high;
	}
	/**
	 * Gets the mazes row number .
	 * 
	 * @return The value of the row.
	 */
	public int getRow() {
		return row;
	}
	/**
	 * Sets the mazes row .
	 * 
	 * @Param- the row we need to use for change.
	 */
	public void setRow(int row) {
		this.row = row;
	}
	/**
	 * Gets the mazes column number .
	 * 
	 * @return The value of the column.
	 */
	public int getColumn() {
		return column;
	}
	/**
	 * Sets the mazes column .
	 * 
	 * @Param- the column we need to use for change.
	 */
	public void setColumn(int column) {
		this.column = column;
	}

	/**
	 * Gets maze's start position.
	 * 
	 * @return	The start position in the maze.
	 */
	public Position getEnter() {
		return enter;
	}
	/**
	 * Sets maze's start position.
	 * 
	 * @param startPosition	 The start position in the maze.
	 */
	public void setEnter(Position enter) {
		this.enter = enter;
	}
	/**
	 * Gets maze's goal position.
	 * 
	 * @return	The goal position in the maze.
	 */
	public Position getExit() {
		return exit;
	}
	/**
	 * Sets maze's goal position.
	 * 
	 * @param goalPosition	 The goal position in the maze.
	 */
	public void setExit(Position exit) {
		this.exit = exit;
	}
	
}
